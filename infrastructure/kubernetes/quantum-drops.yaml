apiVersion: v1
kind: Service
metadata:
  name: quantum-drops
  namespace: quantumlayer
  labels:
    app: quantum-drops
    component: drops-storage
spec:
  type: ClusterIP
  ports:
    - port: 8090
      targetPort: 8090
      protocol: TCP
      name: http
  selector:
    app: quantum-drops
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-drops
  namespace: quantumlayer
  labels:
    app: quantum-drops
    component: drops-storage
spec:
  replicas: 2
  selector:
    matchLabels:
      app: quantum-drops
  template:
    metadata:
      labels:
        app: quantum-drops
        component: drops-storage
      annotations:
        sidecar.istio.io/inject: "false"  # Storage service accessed directly by workflow worker
        prometheus.io/scrape: "true"
        prometheus.io/port: "8090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: quantumlayer-sa
      imagePullSecrets:
        - name: ghcr-secret
      containers:
      - name: quantum-drops
        image: ghcr.io/quantumlayer-dev/quantum-drops:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8090
          name: http
        env:
        - name: PORT
          value: "8090"
        - name: DB_HOST
          value: "postgres-postgresql.temporal.svc.cluster.local"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "changeme"
        - name: DB_NAME
          value: "quantumdrops"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-drops-init-sql
  namespace: quantumlayer
data:
  init.sql: |
    -- Create quantumdrops database if it doesn't exist
    SELECT 'CREATE DATABASE quantumdrops'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'quantumdrops')\gexec
    
    -- Grant privileges
    GRANT ALL PRIVILEGES ON DATABASE quantumdrops TO quantumlayer;