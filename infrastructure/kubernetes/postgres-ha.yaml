# PostgreSQL credentials secret
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: quantumlayer
type: kubernetes.io/basic-auth
stringData:
  username: qlayer
  password: QuantumLayer2024!
---
# PostgreSQL superuser secret
apiVersion: v1
kind: Secret
metadata:
  name: postgres-superuser
  namespace: quantumlayer
type: kubernetes.io/basic-auth
stringData:
  username: postgres
  password: SuperSecret2024!
---
# PostgreSQL HA Cluster using CloudNativePG
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres-cluster
  namespace: quantumlayer
spec:
  instances: 3
  
  primaryUpdateStrategy: unsupervised
  
  postgresql:
    parameters:
      max_connections: "200"
      shared_buffers: "256MB"
      effective_cache_size: "1GB"
      maintenance_work_mem: "64MB"
      checkpoint_completion_target: "0.9"
      wal_buffers: "16MB"
      default_statistics_target: "100"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      work_mem: "4MB"
      min_wal_size: "1GB"
      max_wal_size: "4GB"
      log_statement: "all"
      log_duration: "on"
      log_min_duration_statement: "100ms"
      log_checkpoints: "on"
      log_connections: "on"
      log_disconnections: "on"
    
    pg_hba:
      - host all all 10.0.0.0/8 md5
      - host all all 192.168.0.0/16 md5
  
  bootstrap:
    initdb:
      database: quantumlayer
      owner: qlayer
      secret:
        name: postgres-credentials
      dataChecksums: true
      encoding: UTF8
      
      postInitSQL:
        - CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
        - CREATE EXTENSION IF NOT EXISTS pgcrypto;
        - CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
        - CREATE DATABASE keycloak OWNER qlayer;
        - CREATE DATABASE temporal OWNER qlayer;
        - CREATE DATABASE mlflow OWNER qlayer;
  
  superuserSecret:
    name: postgres-superuser
  
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "2"
  
  affinity:
    enablePodAntiAffinity: true
    topologyKey: kubernetes.io/hostname
  
  storage:
    size: 20Gi
    storageClass: local-path
---
# Service to access PostgreSQL (CloudNativePG creates these automatically, but we'll reference them)
# postgres-cluster-rw = read-write service (primary)
# postgres-cluster-ro = read-only service (replicas)
# postgres-cluster-r = any instance service
---
# PgBouncer Configuration for connection pooling
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgbouncer-config
  namespace: quantumlayer
data:
  pgbouncer.ini: |
    [databases]
    quantumlayer = host=postgres-cluster-rw.quantumlayer.svc.cluster.local port=5432 dbname=quantumlayer
    keycloak = host=postgres-cluster-rw.quantumlayer.svc.cluster.local port=5432 dbname=keycloak
    temporal = host=postgres-cluster-rw.quantumlayer.svc.cluster.local port=5432 dbname=temporal
    mlflow = host=postgres-cluster-rw.quantumlayer.svc.cluster.local port=5432 dbname=mlflow
    
    [pgbouncer]
    listen_addr = 0.0.0.0
    listen_port = 5432
    auth_type = md5
    auth_file = /etc/pgbouncer/userlist.txt
    pool_mode = transaction
    max_client_conn = 1000
    default_pool_size = 25
    min_pool_size = 5
    reserve_pool_size = 5
    max_db_connections = 100
    max_user_connections = 100
    server_lifetime = 3600
    server_idle_timeout = 600
    server_connect_timeout = 15
    query_timeout = 0
    query_wait_timeout = 120
    client_idle_timeout = 0
    client_login_timeout = 60
    stats_period = 60
    log_connections = 1
    log_disconnections = 1
    log_pooler_errors = 1
  
  userlist.txt: |
    "qlayer" "md5a9f3e8c2b5d4f6e7a8b9c0d1e2f3a4b5"
    "postgres" "md5b8e7f6d5c4a3b2a1f9e8d7c6b5a4f3e2"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: quantumlayer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
      - name: pgbouncer
        image: bitnami/pgbouncer:1.20.0
        ports:
        - containerPort: 5432
          name: pgbouncer
        volumeMounts:
        - name: config
          mountPath: /etc/pgbouncer
          readOnly: true
        env:
        - name: POSTGRESQL_HOST
          value: postgres-cluster-rw.quantumlayer.svc.cluster.local
        - name: POSTGRESQL_PORT
          value: "5432"
        - name: POSTGRESQL_DATABASE
          value: quantumlayer
        - name: POSTGRESQL_USERNAME
          value: qlayer
        - name: POSTGRESQL_PASSWORD
          value: QuantumLayer2024!
        - name: PGBOUNCER_DATABASE
          value: quantumlayer
        - name: PGBOUNCER_PORT
          value: "5432"
        - name: PGBOUNCER_POOL_MODE
          value: transaction
        - name: PGBOUNCER_MAX_CLIENT_CONN
          value: "1000"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: pgbouncer-config
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: quantumlayer
  labels:
    app: postgres
spec:
  selector:
    app: pgbouncer
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP
---
# NodePort service for external access during development
apiVersion: v1
kind: Service
metadata:
  name: postgres-nodeport
  namespace: quantumlayer
spec:
  type: NodePort
  selector:
    app: pgbouncer
  ports:
  - port: 5432
    targetPort: 5432
    nodePort: 30432