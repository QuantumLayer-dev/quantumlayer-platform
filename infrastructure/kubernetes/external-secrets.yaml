# External Secrets Operator configuration for enterprise-grade secrets management
# This integrates with HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: quantumlayer
spec:
  provider:
    vault:
      server: "https://vault.quantumlayer.ai:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "quantumlayer"
          serviceAccountRef:
            name: "external-secrets"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: llm-credentials
  namespace: quantumlayer
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: llm-credentials
    creationPolicy: Owner
  data:
  - secretKey: openai-api-key
    remoteRef:
      key: secret/data/prod/llm/openai
      property: api_key
  - secretKey: anthropic-api-key
    remoteRef:
      key: secret/data/prod/llm/anthropic
      property: api_key
  - secretKey: groq-api-key
    remoteRef:
      key: secret/data/prod/llm/groq
      property: api_key
  - secretKey: aws-access-key-id
    remoteRef:
      key: secret/data/prod/aws
      property: access_key_id
  - secretKey: aws-secret-access-key
    remoteRef:
      key: secret/data/prod/aws
      property: secret_access_key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: quantumlayer
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@postgres.quantumlayer.svc.cluster.local:5432/quantumlayer?sslmode=require"
  data:
  - secretKey: username
    remoteRef:
      key: secret/data/prod/database/postgres
      property: username
  - secretKey: password
    remoteRef:
      key: secret/data/prod/database/postgres
      property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: quantumlayer
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: redis-credentials
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        REDIS_URL: "redis://:{{ .password }}@redis.quantumlayer.svc.cluster.local:6379/0"
  data:
  - secretKey: password
    remoteRef:
      key: secret/data/prod/cache/redis
      property: password