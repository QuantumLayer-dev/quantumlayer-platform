apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-ui
  namespace: quantumlayer
  labels:
    app: web-ui
    component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-ui
  template:
    metadata:
      labels:
        app: web-ui
        component: frontend
    spec:
      containers:
      - name: web-ui
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: html-content
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: html-content
        configMap:
          name: web-ui-html
      - name: nginx-config
        configMap:
          name: web-ui-nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: web-ui
  namespace: quantumlayer
  labels:
    app: web-ui
spec:
  type: ClusterIP
  selector:
    app: web-ui
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http

---
apiVersion: v1
kind: Service
metadata:
  name: web-ui-nodeport
  namespace: quantumlayer
  labels:
    app: web-ui
spec:
  type: NodePort
  selector:
    app: web-ui
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30888
    protocol: TCP
    name: http

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-ui-nginx-config
  namespace: quantumlayer
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }