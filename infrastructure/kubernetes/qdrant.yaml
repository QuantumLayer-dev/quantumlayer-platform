# Qdrant Vector Database for QuantumLayer V2
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qdrant-storage
  namespace: quantumlayer
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-config
  namespace: quantumlayer
data:
  config.yaml: |
    service:
      http_port: 6333
      grpc_port: 6334
      host: 0.0.0.0
    
    storage:
      storage_path: /qdrant/storage
      snapshots_path: /qdrant/snapshots
      on_disk_payload: true
      
    telemetry:
      telemetry_disabled: false
      anonymized_telemetry: true
      
    performance:
      max_search_threads: 0  # Auto-detect
      max_optimization_threads: 1
      
    wal:
      wal_capacity_mb: 32
      wal_segments_ahead: 0
      
    consensus:
      tick_period_ms: 100
      
    cluster:
      enabled: false  # Enable for HA setup later
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qdrant
  namespace: quantumlayer
  labels:
    app: qdrant
    component: vectordb
spec:
  replicas: 1  # Single instance for now, can scale to cluster later
  selector:
    matchLabels:
      app: qdrant
  template:
    metadata:
      labels:
        app: qdrant
        component: vectordb
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "6333"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: qdrant
        image: qdrant/qdrant:v1.7.4
        ports:
        - containerPort: 6333
          name: http
          protocol: TCP
        - containerPort: 6334
          name: grpc
          protocol: TCP
        env:
        - name: QDRANT__SERVICE__HTTP_PORT
          value: "6333"
        - name: QDRANT__SERVICE__GRPC_PORT
          value: "6334"
        - name: QDRANT__LOG_LEVEL
          value: "INFO"
        volumeMounts:
        - name: storage
          mountPath: /qdrant/storage
        - name: config
          mountPath: /qdrant/config
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /
            port: 6333
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /readyz
            port: 6333
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: qdrant-storage
      - name: config
        configMap:
          name: qdrant-config
---
apiVersion: v1
kind: Service
metadata:
  name: qdrant
  namespace: quantumlayer
  labels:
    app: qdrant
spec:
  type: ClusterIP
  ports:
  - port: 6333
    targetPort: 6333
    protocol: TCP
    name: http
  - port: 6334
    targetPort: 6334
    protocol: TCP
    name: grpc
  selector:
    app: qdrant
---
# NodePort service for development access
apiVersion: v1
kind: Service
metadata:
  name: qdrant-nodeport
  namespace: quantumlayer
spec:
  type: NodePort
  ports:
  - port: 6333
    targetPort: 6333
    nodePort: 30633
    protocol: TCP
    name: http
  selector:
    app: qdrant
---
# HPA for auto-scaling based on load
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: qdrant-hpa
  namespace: quantumlayer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: qdrant
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80