name: Meta Prompt Engine CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/meta-prompt-engine/**'
      - 'packages/shared/**'
      - '.github/workflows/meta-prompt-engine.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/meta-prompt-engine/**'
      - 'packages/shared/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: quantumlayer-dev/meta-prompt-engine

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          
      - name: Run tests
        run: |
          cd packages/meta-prompt-engine
          go test -v -race -coverprofile=coverage.out ./...
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./packages/meta-prompt-engine/coverage.out
          flags: meta-prompt-engine
          
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'packages/meta-prompt-engine'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: './packages/meta-prompt-engine/...'
          
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: packages/meta-prompt-engine
          args: --timeout=5m
          
  build:
    name: Build and Push
    needs: [test, security, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # For signing
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/docker/Dockerfile.meta-prompt-engine
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          
      - name: Sign container image
        uses: sigstore/cosign-installer@v3
        
      - name: Sign the container image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          
  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Update Helm dependencies
        run: |
          helm dependency update infrastructure/helm/charts/meta-prompt-engine
          
      - name: Package Helm chart
        run: |
          helm package infrastructure/helm/charts/meta-prompt-engine
          
      - name: Push to Helm repository
        run: |
          helm push meta-prompt-engine-*.tgz oci://${{ env.REGISTRY }}/quantumlayer-dev/charts
          
      - name: Update ArgoCD Application
        run: |
          # This would trigger ArgoCD to sync the new version
          # In practice, ArgoCD would auto-sync from Git
          echo "ArgoCD will auto-sync from Git"