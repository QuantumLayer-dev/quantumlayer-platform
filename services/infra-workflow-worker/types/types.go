package types

import "time"

// InfrastructureRequest is the input for infrastructure generation workflow
type InfrastructureRequest struct {
	WorkflowID         string   `json:"workflow_id"`
	Provider           string   `json:"provider"`           // aws, gcp, azure, kubernetes
	Environment        string   `json:"environment"`        // dev, staging, production
	Compliance         []string `json:"compliance"`         // SOC2, HIPAA, PCI-DSS, GDPR
	EnableGoldenImages bool     `json:"enable_golden_images"`
	EnableSOP          bool     `json:"enable_sop"`
	AutoDeploy         bool     `json:"auto_deploy"`
	DryRun             bool     `json:"dry_run"`
	CustomRequirements map[string]interface{} `json:"custom_requirements"`
}

// InfrastructureResult is the output of infrastructure generation workflow
type InfrastructureResult struct {
	WorkflowID         string                 `json:"workflow_id"`
	Status             string                 `json:"status"`
	Message            string                 `json:"message"`
	StartTime          time.Time              `json:"start_time"`
	EndTime            time.Time              `json:"end_time"`
	Duration           string                 `json:"duration"`
	Stages             map[string]StageResult `json:"stages"`
	InfrastructureCode map[string]string      `json:"infrastructure_code"`
	EstimatedCost      *CostEstimate         `json:"estimated_cost,omitempty"`
	DeploymentURL      string                 `json:"deployment_url,omitempty"`
}

// StageResult represents the result of each workflow stage
type StageResult struct {
	Name      string      `json:"name"`
	Status    string      `json:"status"`
	StartTime time.Time   `json:"start_time"`
	Duration  string      `json:"duration,omitempty"`
	Output    interface{} `json:"output,omitempty"`
	Error     string      `json:"error,omitempty"`
}

// CodeAnalysis result from analyzing generated code
type CodeAnalysis struct {
	Language          string                 `json:"language"`
	Framework         string                 `json:"framework"`
	RequiredResources []ResourceRequirement `json:"required_resources"`
	RequiredPackages  []string              `json:"required_packages"`
	RecommendedOS     string                `json:"recommended_os"`
	Requirements      map[string]interface{} `json:"requirements"`
}

// ResourceRequirement defines infrastructure resources needed
type ResourceRequirement struct {
	Type       string                 `json:"type"` // compute, storage, database, network
	Name       string                 `json:"name"`
	Properties map[string]interface{} `json:"properties"`
}

// GenerateInfraRequest for infrastructure generation activity
type GenerateInfraRequest struct {
	WorkflowID   string                  `json:"workflow_id"`
	Provider     string                  `json:"provider"`
	Resources    []ResourceRequirement   `json:"resources"`
	Compliance   []string                `json:"compliance"`
	Environment  string                  `json:"environment"`
	Requirements map[string]interface{}  `json:"requirements"`
}

// InfrastructureCode generated by QInfra
type InfrastructureCode struct {
	Framework     string            `json:"framework"` // terraform, pulumi, cloudformation
	Code          map[string]string `json:"code"`      // filename -> content
	DeployScript  string            `json:"deploy_script"`
	Documentation string            `json:"documentation"`
}

// GoldenImageRequest for golden image building
type GoldenImageRequest struct {
	BaseOS     string   `json:"base_os"`
	Packages   []string `json:"packages"`
	Hardening  string   `json:"hardening"`
	Compliance []string `json:"compliance"`
}

// GoldenImageResult from image building
type GoldenImageResult struct {
	ImageID      string    `json:"image_id"`
	ImageName    string    `json:"image_name"`
	Registry     string    `json:"registry"`
	BuildTime    time.Time `json:"build_time"`
	Size         int64     `json:"size"`
	Vulnerabilities []string `json:"vulnerabilities,omitempty"`
}

// SOPRequest for generating standard operating procedures
type SOPRequest struct {
	InfrastructureType string   `json:"infrastructure_type"`
	Operations         []string `json:"operations"`
}

// SOPResult from SOP generation
type SOPResult struct {
	Runbooks map[string]Runbook `json:"runbooks"`
}

// Runbook represents an operational procedure
type Runbook struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Steps       []string `json:"steps"`
	Automation  bool     `json:"automation"`
}

// ComplianceRequest for compliance validation
type ComplianceRequest struct {
	Code       map[string]string `json:"code"`
	Frameworks []string          `json:"frameworks"`
}

// ComplianceResult from validation
type ComplianceResult struct {
	Score        float64           `json:"score"`
	Passed       int               `json:"passed"`
	Failed       int               `json:"failed"`
	Findings     []string          `json:"findings"`
	Remediation  []string          `json:"remediation"`
	Compliant    bool              `json:"compliant"`
}

// CostRequest for cost estimation
type CostRequest struct {
	Provider  string                  `json:"provider"`
	Resources []ResourceRequirement   `json:"resources"`
}

// CostEstimate for infrastructure
type CostEstimate struct {
	Monthly      float64            `json:"monthly_usd"`
	Hourly       float64            `json:"hourly_usd"`
	Annual       float64            `json:"annual_usd"`
	Breakdown    map[string]float64 `json:"breakdown"`
	Optimizations []string          `json:"optimizations"`
}

// InfraDropRequest for storing infrastructure artifacts
type InfraDropRequest struct {
	WorkflowID string      `json:"workflow_id"`
	Stage      string      `json:"stage"`
	Type       string      `json:"type"`
	Artifact   interface{} `json:"artifact"`
}

// DeployRequest for infrastructure deployment
type DeployRequest struct {
	WorkflowID  string            `json:"workflow_id"`
	Provider    string            `json:"provider"`
	Environment string            `json:"environment"`
	Code        map[string]string `json:"code"`
	DryRun      bool              `json:"dry_run"`
}

// DeploymentResult from infrastructure deployment
type DeploymentResult struct {
	DeploymentID string    `json:"deployment_id"`
	Status       string    `json:"status"`
	URL          string    `json:"url"`
	Resources    []string  `json:"resources"`
	StartTime    time.Time `json:"start_time"`
	EndTime      time.Time `json:"end_time"`
}